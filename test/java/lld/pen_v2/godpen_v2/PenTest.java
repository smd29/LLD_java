package lld.pen_v2.godpen_v2;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import org.junit.Test;

import lld.pen_v2.godpen.models.Ink;
import lld.pen_v2.godpen.models.InkType;
import lld.pen_v2.godpen.models.Nib;
import lld.pen_v2.godpen.models.PenType;
import lld.pen_v2.godpen.models.Refill;
import lld.pen_v2.godpen.models.RefillType;

public class PenTest {
    @Test
    public void testGelPenCreation(){
        // Gel pen doesn't have ink and nib, but it has refill
        Ink ink = new Ink("Black", "Parker", InkType.GEL);
        Nib nib = new Nib(0.25);
        Refill refill = new Refill(RefillType.GEL, ink, nib);
        Pen gelPen = new GelPen("Parker", "Gel", 100.0, refill);

        assertNotNull("If constructor is called, pen shouldn't be null", gelPen);
        assertNotNull("If pen is Gel, then refill shouldn't be null", ((GelPen)gelPen).getRefill());
    }

    @Test
    public void testFountainPenCreation(){
        // Fountain pen doesn't have refill
        Ink ink = new Ink("Black", "Parker", InkType.FOUNTAIN);
        Nib nib = new Nib(0.25);
        Pen fountainPen = new FountainPen("Parker", "Fountain", 200.0, ink, nib);
        // Pen gelPen = Pen.gelPen("Parker", "Gel", 100.0, refill);

        assertNotNull("If constructor is called, pen shouldn't be null", fountainPen);
        
        assertNotNull("If pen is Fountain, the ink should not be null", ((FountainPen)fountainPen).getInk());
        assertNotNull("If pen is Fountain, the nib should not be null", ((FountainPen)fountainPen).getNib());
    }
}
